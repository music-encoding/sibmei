{
  SibmeiExtensionAPIVersion "2.0.0"

  Initialize "() {
    AddToPluginsMenu('Sibmei extension test', 'Run');
  }"

  Run "() {
    // The plugin will be listed in the menu, but it is not runnable. Give some
    // instructions instead of showing no response when users try to run it.
    Sibelius.MessageBox(
      'This plug-in is an extension of the sibmei MEI export plug-in. To use it, run MEI export.'
    );
  }"

  InitSibmeiExtension "(api) {
    Self._property:MySymbolTemplate = @Element('Symbol', @Attrs(
      'fontfam', 'myCustomFont',
      'glyph.name', 'mySymbolGlyph'
    ));

    api.RegisterSymbolHandlers('Name', CreateDictionary(
      'My symbol', 'HandleMySymbol',
      'My soft accent', api.AsModifier(CreateSparseArray('Artic', CreateDictionary(
        'artic', 'acc',
        'glyph.auth', 'smufl',
        'glyph.name', 'articSoftAccentAbove',
        'glyph.num', 'U+ED40'
      )))
    ), Self);

    api.RegisterTextHandlers('StyleAsText', CreateDictionary(
      // Example of a text generated by means of a custom text handler
      'XPath test', 'HandleXPathTest',
      // Example of a text generated by template
      'My text', @Element('AnchoredText', @Attrs(), api.FormattedText)
    ), Self);

    api.RegisterLineHandlers('StyleAsText', CreateDictionary(
      'My line', @Element('Line', @Attrs(
        'type', 'myline', 'endid', 'PreciseMatch'
      ))
    ), Self);
  }"

  HandleMySymbol "(api, obj) {
    symbolElement = api.GenerateControlEvent(obj, api.MeiFactory(MySymbolTemplate, obj));
    if (obj.ColorRed = 255) {
      api.libmei.AddAttribute(symbolElement, 'type', 'myRedType');
    }
    return symbolElement;
  }"

  HandleXPathTest "(api, textObj) {
    // This text style is used by the sibmei test suite
    annotElement = api.GenerateControlEvent(textObj, api.libmei.Annot());
    api.libmei.AddAttribute(annotElement, 'type', 'xpath-test');
    textWithFormatting = textObj.TextWithFormatting;
    for i = 0 to textWithFormatting.NumChildren {
      if (CharAt(textWithFormatting[i], 0) = '\\') {
        // Remove formatting and newlines. fontoxpath will complain if there is
        // additional whitespace in XPath expressions.
        textWithFormatting[i] = '';
      }
    }
    api.libmei.SetText(annotElement, JoinStrings(textWithFormatting, ''));
    return annotElement;
  }"
}
