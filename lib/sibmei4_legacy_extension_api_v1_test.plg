{
  SibmeiExtensionAPIVersion "1.2.0"

  Initialize "() {
    AddToPluginsMenu('Sibmei extension test for legacy API v1', 'Run');
  }"

  Run "() {
    // The plugin will be listed in the menu, but it is not runnable. Give some
    // instructions instead of showing no response when users try to run it.
    Sibelius.MessageBox(
      'This plug-in is an extension of the sibmei MEI export plug-in. To use it, run MEI export.'
    );
  }"

  InitSibmeiExtension "(api) {
    Self._property:api = api;
    Self._property:libmei = api.libmei;

    Self._property:MySymbolTemplate = CreateSparseArray('Symbol', CreateDictionary(
      'fontfam', 'myCustomFont',
      'glyph.name', 'mySymbolGlyph'
    ));

    Self._property:MyLineTemplate = CreateSparseArray(
      'Line', CreateDictionary('type', 'myline', 'endid')
    );

    api.RegisterSymbolHandlers(CreateDictionary(
      'Name', CreateDictionary(
        'My symbol', 'HandleMySymbol'
      )
    ), Self);

    api.RegisterTextHandlers(CreateDictionary(
      'StyleAsText', CreateDictionary(
        'XPath test', 'HandleXPathTest',
        'My text', 'HandleMyText'
      )
    ), Self);

    api.RegisterLineHandlers(CreateDictionary(
      'StyleAsText', CreateDictionary(
        'My line', CreateSparseArray(
          'Line', CreateDictionary('type', 'myline', 'endid')
        )
      )
    ), Self);
  }"

  HandleMySymbol "(this, obj) {
    symbolElement = api.HandleControlEvent(obj, MySymbolTemplate);
    if (obj.ColorRed = 255) {
      libmei.AddAttribute(symbolElement, 'type', 'myRedType');
    }
  }"

  HandleMyText "(this, textObj) {
    textElement = api.GenerateControlEvent(textObj, 'AnchoredText');
    api.AddFormattedText(textElement, textObj);
    return textElement;
  }"

  HandleXPathTest "(this, textObj) {
    annotElement = api.GenerateControlEvent(textObj, 'Annot');
    libmei.AddAttribute(annotElement, 'type', 'xpath-test');
    textWithFormatting = textObj.TextWithFormatting;
    for i = 0 to textWithFormatting.NumChildren {
      if (CharAt(textWithFormatting[i], 0) = '\\') {
        // Remove formatting and newlines. fontoxpath will complain about if
        // is additional whitespace in XPath expressions.
        textWithFormatting[i] = '';
      }
    }
    libmei.SetText(annotElement, JoinStrings(textWithFormatting, ''));
    return annotElement;
  }"
}
